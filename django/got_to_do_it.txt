 ---- General Stuff ----
 // how docker container works, where to run python commands, how to access db container 
 // how to connect DB in docker and how to connect DB in Debreaver, how to connect to Psql db using cmd line
 // how to migrate back to certain migration file and if its not happening we need to manually write the code and change the table and also if data is there we can see some conflicts
 // how we can use python shell_plus and use the ORM to check and see the objects we are getting from a particular query
 // how we can import a particular fn in the shell_plus and we can execute it for testing
 // how to use postman how to set the --curl link, Headers, Params, Request Body, Instance Body etc
 // how to track APIs and fns of a code base 


 ---- Django Commands ---- 

link : https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/

 ---- Google Auto-Complete API ----

link : https://developers.google.com/maps/documentation/places/web-service/autocomplete

Github link : https://github.com/googlemaps/google-maps-services-python/blob/master/googlemaps/geocoding.py
cc : refer how they have done the functions

 ---- Python Scripts ----

link : https://beapython.dev/2019/12/23/writing-your-first-python-script/

 ---- Empty Migration file ----
	
link : https://stackoverflow.com/questions/50320989/how-would-you-create-a-manual-django-migration

// how to define a function and run it inside an empty migration file
link : https://chat.openai.com/c/8213addf-dac9-42a1-bda2-ac3114b72754
cc : Do Chatgpt (also you can get this in Stackoverflow)

 ---- APIs ---- 

For apis creation we can use function base apis or class based apis, for class based apis, we have Django-restframework generics, the best and powerful method to make a CRUD API

Doc link : https://www.django-rest-framework.org/api-guide/generic-views/

YT link : https://www.youtube.com/watch?v=Oz3SoVV27ak (watch this for full generics and serializer and API based views) (YT channel name - Bryan Brkic)

// important thing :  in the case of ListAPI, we have one read_serializer_class and one write_serializer_class, by default we assign one thing for serializer_class but in if we specify read and write we need to over write the def post function of the ListCreateAPIView class and we need to specify what serialised we want to use, there we get the data by request.data and we can get the headers as well by request.headers and all, we can check the network tab in inspect for headers, now if we want to specify the read_serializer then we can overload the def get as well or we can simply keep the read_serializer as serializer_class(default) for listing the objects, 
(Remember -  we use write_serializer for taking the request and read for giving the response

// refer to this code : 

batch_suggestion model and crud apis 

batch_suggestion_crud_api code :
 
import logging
from apps.base.utils.constants.constants import MEMBER_APP
from rest_framework import filters
from drf_yasg.utils import swagger_auto_schema
from rest_framework.response import Response
from apps.base.response.failure import FAILURE
from apps.base.response.success import SUCCESS
from drf_rw_serializers.generics import ListCreateAPIView
from django_filters.rest_framework import DjangoFilterBackend

from apps.oh_classes.course.models.schedule_suggestions import BatchScheduleSuggestions
from apps.oh_classes.course.serializers.batch_schedule_suggestion_serializer import BatchScheduleSuggestionGetSerializer, BatchScheduleSuggestionCreteSerializer

logger = logging.getLogger(__name__)

class BatchSuggestionCreateApi(ListCreateAPIView):
    """
    Batch Suggestion API View
    """

    # Ignoring Soft Delete Models On API
    queryset = BatchScheduleSuggestions.objects.filter(deleted=False)
    read_serializer_class = BatchScheduleSuggestionGetSerializer
    write_serializer_class = BatchScheduleSuggestionCreteSerializer
    filter_backends = [DjangoFilterBackend, filters.SearchFilter]
    lookup_field = 'uuid'
    filter_fields = ('user__uuid', 'created_by__uuid')

    @swagger_auto_schema(request_body=BatchScheduleSuggestionCreteSerializer)
    def post(self, request, *args, **kwargs):
        try:
            data = request.data
            data['source'] = request.headers.get("Source", MEMBER_APP)
            data['created_by'] = str(request.user.uuid)
            serializer = BatchScheduleSuggestionCreteSerializer(data=data)
            if serializer.is_valid(raise_exception=True):
                serializer.save()
                return SUCCESS
            else:
                return FAILURE
        except Exception as error:
            logger.error("error in creating batch schedule suggestion:%s", error)
            raise error







batch_suggestion_serializer code : 

import logging
from apps.base.user.serializers.read import BasicUserSerializer
from apps.oh_classes.course.models.schedule_suggestions import BatchScheduleSuggestions
from apps.oh_classes.course.serializers.course import CourseSerializer

from rest_framework import serializers
from rest_framework.fields import UUIDField

logger = logging.getLogger(__name__)


class BatchScheduleSuggestionCreteSerializer(serializers.ModelSerializer):
    """
    [POST] Batch Schedule Suggestion Serializer
    """

    class Meta:
        model = BatchScheduleSuggestions
        fields = [
            "uuid",
            "user",
            "course",
            "suggestion",
            "source",
            "created_by"
        ]

class BatchScheduleSuggestionGetSerializer(serializers.ModelSerializer):
    """
    [GET] Batch Schedule Suggestion Serializer
    """

    user = BasicUserSerializer(read_only=True)
    course = CourseSerializer(read_only=True, many=False)

    class Meta:
        model = BatchScheduleSuggestions
        fields = [
            "uuid",
            "user",
            "course",
            "suggestion",
            "source",
            "created_by"
        ]




 ---- Serializers ----

Read the serializer from the above api section, other than that use generics or function based api calls and how their serializer works, we can over ride a lot of things, before passing to the serializer and after passing to the serializer as well (checkout the code of crm_interaction and crm_interaction_topic) for details 



Doc link : https://github.com/encode/django-rest-framework/blob/master/rest_framework/serializers.py#L86 (we can override everything)

Code of api : 

from rest_framework.generics import ListCreateAPIView
from apps.crm.models.crm_interaction import CrmInteraction
from apps.crm.serializers.crm_interaction import *
from drf_yasg.utils import swagger_auto_schema
from apps.base.response.failure import FAILURE
from apps.base.response.success import SUCCESS
from rest_framework.response import Response

class CrmInteractionListCreateAPIView(ListCreateAPIView):
    
    queryset = CrmInteraction.objects.all().select_related("parent", "created_by")
    serializer_class = CrmInteractionGetSerializer
    read_serializer_class = CrmInteractionGetSerializer
    write_serializer_class = CrmInteractionCreateSerializer
    
    @swagger_auto_schema(request_body=CrmInteractionCreateSerializer)
    def post(self, request, *args, **kwargs):
        try:
            data = request.data
            topic_list = data.pop("interaction_topics")
            serializer = CrmInteractionCreateSerializer(data=data, context = {'topics' : topic_list})
            if serializer.is_valid(raise_exception=True):
                serializer.save()
                return SUCCESS
            else:
                return FAILURE
        except Exception as error:
            logger.error(f"error in creating Crm Interaction {error}")
            raise error


Code for serializer :

import logging

from rest_framework import serializers
from apps.crm.models.crm_interaction import CrmInteraction
from apps.crm.models.crm_interaction_topic import CrmInteractionTopic
from apps.oh_users.student.serializers.basic_parent import BasicParentSerializer
# from apps.crm.serializers.crm_interaction_topic import CrmInteractionTopicCreateSerializer
from apps.base.user.serializers.read import BasicUserSerializer, GetUserSerializer


logger = logging.getLogger(__name__)

class CrmInteractionCreateSerializer(serializers.ModelSerializer):
    
    '''
        Crm Interaction Write serializer
    '''
    # interaction = CrmInteractionTopicCreateSerializer
    class Meta:
        model = CrmInteraction
        fields = [
            "uuid",
            "parent",
            "interaction_date",
            "interaction_mode",
            "follow_up_date",
            "follow_up_required",
            "interaction_summary",
            "created_by"
        ]
        
    def create(self, validated_data):
        topics = self.context.get('topics', [])
        interaction = CrmInteraction.objects.create(**validated_data)
        for topic in topics:
            CrmInteractionTopic.objects.create(interaction = interaction, name=topic)
        return interaction

class CrmInteractionGetSerializer(serializers.ModelSerializer):
    
    '''
        Crm Interaction Read Serializer
    '''
    parent = BasicParentSerializer(read_only=True, many=False)
    created_by = GetUserSerializer(read_only=True, many=False)
    
    class Meta:
        model = CrmInteraction
        fields = [
            "uuid",
            "parent",
            "interaction_date",
            "interaction_mode",
            "follow_up_date",
            "follow_up_required",
            "interaction_summary",
            "created_by"
        ]
    
    

REMEMBER, here we are creating the child model of interaction topic on the go. 


 ---- Django Filters ----
    
    // READ the documentation in detail, also if want to revise it quick check the oh-api code base, there is methods which we can define for looking for the filters and also what value should we retrieve after we got the filter, like for schedule task CB-305, I have added the level field and also how to filter the queryset with that field, like 'batch__level__" etc etc so check that from oh-api and we can surely create our method and define it inside the level field which you have added

link : https://django-filter.readthedocs.io/en/stable/guide/install.html   // go on reading 
YT link : https://www.youtube.com/watch?v=FTUxl5ZCMb8&t=1240s // study it well 

 ---- Django Signals ----

link :


 ---- AWS Lambda ----

link : 


 ---- Helios ----

link : 



 ------Django Rest Framework creating child objects in parent serializer using child serializer------

Link : https://stackoverflow.com/questions/57186336/django-rest-framework-creating-child-objects-in-parent-serializer-using-child-se

