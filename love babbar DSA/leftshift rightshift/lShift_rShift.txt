left shift
(5 << 1) // this means move every bit of 5 (binary) to left by one place..
like 5 = 000000....0101 (32bits)  by moving by left its 00000....01010.. now its 10.
(3 << 2) // move by 2 places
000000....0011   -> 000000....1100 .. now its 12.
in general we can observe that the number gets multiplied by 2 for each left shifting ... 5 becomes 10 (5*2)   3 becomes 12 (3*4)

but for big posetive number the case is different

010000....0010   move that by one place  -> 100000....0100  now as the first bit is 1 so the number is negative.. SO DONT ALWAYS MULTIPLY WITH 2

now right shift 
(5>>2) // moves each and eveery bit of 5 towards right by 2 places
00000....0101 -> 00000....0001 .. now its 1

basically it got divided by 2 for each right shift ((5/2)/2) = 1

FOR NEGATIVE NUMBER ITS TOTALLY COMPILER DEPENDENT ( as we dont know the padding would be of 0 or 1.. unlike posetive number (paddiing 1 always))